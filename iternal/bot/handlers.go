package bot

import (
	"fmt"

	tele "gopkg.in/telebot.v3"
)

func addHandlers(b *tele.Bot) {
	b.Handle("/start", registerUser)
	b.Handle(&btnRegisterAdmin, registerAdmin)
	b.Handle(&btnUnregisterAdmin, unregisterAdmin)
	b.Handle(&btnUsage, getUsage)
	b.Handle(&btnAccess, getAccess)
	b.Handle(&btnPayment, getPaymentChoices)
	b.Handle(&btnTon, getPaymentTon)
	b.Handle(&btnCard, getPaymentCard)
	b.Handle(&btnHelp, getHelp)
	b.Handle(&btnHelpAccept, helpAccepted)
	b.Handle(&btnHelpDecline, helpDeclined)
	b.Handle(tele.OnText, answer)
	b.Handle(tele.OnPhoto, answer)
	b.Handle(tele.OnAudio, answer)
}

func registerUser(c tele.Context) error {
	userID := c.Sender().ID

	if userExists(userID) {
		c.Send("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", getKeyboard(c, "menu"))
		return nil
	}

	username := c.Sender().Username

	outlineID, message, err := newAccessKey(username)
	if err != nil {
		return err
	}

	addUser(userID, outlineID)

	return c.Send(message, getKeyboard(c, "menu"))
}

func getUsage(c tele.Context) error {
	outlineID, err := getOutlineID(c.Sender().ID, c.Sender().Username)
	if err != nil {
		return err
	}

	usage, err := getDataTransfered(outlineID)
	if err != nil {
		return err
	}

	return c.Send(fmt.Sprintf("–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:\n%v", usage), getKeyboard(c, "menu"))
}

func getAccess(c tele.Context) error {
	outlineID, err := getOutlineID(c.Sender().ID, c.Sender().Username)
	if err != nil {
		return err
	}

	url, err := getAccessURL(outlineID)
	if err != nil {
		return err
	}

	btnURL := urlMenu.URL("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", url)
	urlMenu.Inline(urlMenu.Row(btnURL))

	message := "<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!</b>\n"
	return c.Send(message, urlMenu)
}

func getPaymentChoices(c tele.Context) error {
	setState(c.Sender().ID, statePAY)
	return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", getKeyboard(c, "payments"))
}

func getPaymentTon(c tele.Context) error {
	if !isState(c.Sender().ID, statePAY) {
		c.Send("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é '–ü–ª–∞—Ç–µ–∂–∏'", getKeyboard(c, "menu"))
		return nil
	}

	price, err := getPrice("TON")
	if err != nil {
		return err
	}

	url, payUrl, com, err := getTonURLs(c.Sender().ID, c.Sender().Username, price)
	if err != nil {
		return err
	}

	btnURL := urlMenu.URL("–†–µ–∫–≤–∏–∑–∏—Ç—ã", url)
	btnPayURL := urlMenu.URL("–û–ø–ª–∞—Ç–∏—Ç—å", payUrl)
	urlMenu.Inline(urlMenu.Row(btnURL), urlMenu.Row(btnPayURL))

	if err := c.Send(fmt.Sprintf("–ö –æ–ø–ª–∞—Ç–µ %vüíé", price), urlMenu); err != nil {
		return err
	}

	msg := fmt.Sprintf("<b>–ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–æ–¥ –æ–ø–ª–∞—Ç—ã:</b>\n%v", com)
	err = c.Send(msg, getKeyboard(c, "menu"))
	setState(c.Sender().ID, stateIDLE)
	return err
}

func getPaymentCard(c tele.Context) error {
	if !isState(c.Sender().ID, statePAY) {
		c.Send("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é '–ü–ª–∞—Ç–µ–∂–∏'", getKeyboard(c, "menu"))
		return nil
	}

	price, err := getPrice("CARD")
	if err != nil {
		return err
	}

	url, com, err := getCardURL(c.Sender().ID, c.Sender().Username, price)
	if err != nil {
		return err
	}

	if err := c.Send(url); err != nil {
		return err
	}

	err = c.Send(fmt.Sprintf("<b>–î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–æ–¥ –æ–ø–ª–∞—Ç—ã:</b>\n%v", com), getKeyboard(c, "menu"))
	setState(c.Sender().ID, stateIDLE)
	return err
}

func getHelp(c tele.Context) error {
	msg := "–ó–∞–ø—Ä–∞—à–∏–≤–∞—è –æ–±—Ä–∞—â–µ–Ω–∏–µ, –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n"
	msg += "–í–∞—à ID –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –æ–±—Ä–∞—â–µ–Ω–∏–π –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"
	return c.Send(msg, getKeyboard(c, "helpMenu"))
}

func helpAccepted(c tele.Context) error {
	setState(c.Sender().ID, stateHELP)
	return c.Send("–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Å–≤–æ—ë –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
}

func helpSend(c tele.Context) error {
	setState(c.Sender().ID, stateIDLE)
	if err := registerHelpRequest(c); err != nil {
		c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è", getKeyboard(c, "menu"))
		return err
	}
	return c.Send("–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è", getKeyboard(c, "menu"))
}

func helpDeclined(c tele.Context) error {
	return c.Send("–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É –≤ –æ–ø–∏—Å–∞–Ω–∏–∏", getKeyboard(c, "menu"))
}

func answer(c tele.Context) error {
	if isState(c.Sender().ID, stateHELP) {
		return helpSend(c)
	}
	if isAdmin(c.Sender().ID) {
		if answerRequest(c) {
			msg := "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ"
			return c.Send(msg, getKeyboard(c, "menu"))
		}
		return c.Send("–û—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", getKeyboard(c, "menu"))
	}
	return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é", getKeyboard(c, "menu"))
}
